
be_vhdl_c.elf:     file format elf32-littlenios2
be_vhdl_c.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000004d8 memsz 0x000004d8 flags r-x
    LOAD off    0x000014f8 vaddr 0x000004f8 paddr 0x000004fc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001500 vaddr 0x00000500 paddr 0x00000500 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000014fc  2**0
                  CONTENTS
  2 .text         000004c0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000004e0  000004e0  000014e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000004f8  000004fc  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000500  00000500  00001500  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0000050c  0000050c  000014fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000010f8  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000913  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000b82  00000000  00000000  00003113  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000254  00000000  00000000  00003c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000834  00000000  00000000  00003eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006ea  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00004e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005da1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00005da4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005dac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005dad  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00005dae  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00005db9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00005dcf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  00005dd7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00039c33  00000000  00000000  00005e1d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000004e0 l    d  .rodata	00000000 .rodata
000004f8 l    d  .rwdata	00000000 .rwdata
00000500 l    d  .bss	00000000 .bss
0000050c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../be_vhdl_c_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000190 g     F .text	0000002c alt_main
000004fc g       *ABS*	00000000 __flash_rwdata_start
000001bc g     F .text	00000038 alt_putstr
000002e0 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000504 g     O .bss	00000004 alt_argv
000084f8 g       *ABS*	00000000 _gp
000001f4 g     F .text	00000004 usleep
000003fc g     F .text	00000064 .hidden __udivsi3
0000050c g       *ABS*	00000000 __bss_end
000002d8 g     F .text	00000004 alt_dcache_flush_all
000004fc g       *ABS*	00000000 __ram_rwdata_end
000004f8 g       *ABS*	00000000 __ram_rodata_end
000004f8 g     O .rwdata	00000004 jtag_uart_0
00000460 g     F .text	00000058 .hidden __umodsi3
0000050c g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000021c g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000218 g     F .text	00000004 alt_sys_init
000004b8 g     F .text	00000028 .hidden __mulsi3
000004f8 g       *ABS*	00000000 __ram_rwdata_start
000004e0 g       *ABS*	00000000 __ram_rodata_start
00000250 g     F .text	00000088 alt_busy_sleep
0000050c g       *ABS*	00000000 __alt_stack_base
00000500 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000054 main
00000500 g     O .bss	00000004 alt_envp
00000304 g     F .text	00000084 .hidden __divsi3
000004e0 g       *ABS*	00000000 __flash_rodata_start
000001f8 g     F .text	00000020 alt_irq_init
00000508 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000004fc g       *ABS*	00000000 _edata
0000050c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000388 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000000c g       .entry	00000000 _exit
000002e8 g     F .text	0000001c strlen
000002dc g     F .text	00000004 alt_icache_flush_all
000000b0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a13e14 	ori	gp,gp,34040
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10814014 	ori	r2,r2,1280

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c14314 	ori	r3,r3,1292

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000b00 	call	b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001900 	call	190 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
#include "time.h"
#include "unistd.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#include <stdint.h>
#include "time.h"
#include "unistd.h"

int main()
{ 
  60:	defffd04 	addi	sp,sp,-12
  alt_putstr("Hello from Nios II!\n");
  64:	21013804 	addi	r4,r4,1248
#include <stdint.h>
#include "time.h"
#include "unistd.h"

int main()
{ 
  68:	dc400115 	stw	r17,4(sp)
  6c:	dc000015 	stw	r16,0(sp)
  70:	dfc00215 	stw	ra,8(sp)
  uint32_t * leds = (uint32_t *)PIO_0_BASE;
  int x = 0;

  /* Event loop never exits. */
  while (1){
	  *leds=1;
  74:	04240014 	movui	r16,36864
#include "time.h"
#include "unistd.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  78:	00001bc0 	call	1bc <alt_putstr>
  uint32_t * leds = (uint32_t *)PIO_0_BASE;
  int x = 0;

  /* Event loop never exits. */
  while (1){
	  *leds=1;
  7c:	04400044 	movi	r17,1
	  usleep(1000000);
  80:	010003f4 	movhi	r4,15
  uint32_t * leds = (uint32_t *)PIO_0_BASE;
  int x = 0;

  /* Event loop never exits. */
  while (1){
	  *leds=1;
  84:	84400015 	stw	r17,0(r16)
	  usleep(1000000);
  88:	21109004 	addi	r4,r4,16960
  8c:	00001f40 	call	1f4 <usleep>
	  alt_putstr("Hello from Nios II!\n");
  90:	01000034 	movhi	r4,0
  94:	21013804 	addi	r4,r4,1248
  98:	00001bc0 	call	1bc <alt_putstr>
	  *leds=0;
	  usleep(1000000);
  9c:	010003f4 	movhi	r4,15
  /* Event loop never exits. */
  while (1){
	  *leds=1;
	  usleep(1000000);
	  alt_putstr("Hello from Nios II!\n");
	  *leds=0;
  a0:	80000015 	stw	zero,0(r16)
	  usleep(1000000);
  a4:	21109004 	addi	r4,r4,16960
  a8:	00001f40 	call	1f4 <usleep>
  ac:	003ff406 	br	80 <main+0x24>

000000b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  b0:	deffff04 	addi	sp,sp,-4
  b4:	01000034 	movhi	r4,0
  b8:	01400034 	movhi	r5,0
  bc:	dfc00015 	stw	ra,0(sp)
  c0:	21013e04 	addi	r4,r4,1272
  c4:	29413f04 	addi	r5,r5,1276

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  c8:	2140061e 	bne	r4,r5,e4 <alt_load+0x34>
  cc:	01000034 	movhi	r4,0
  d0:	01400034 	movhi	r5,0
  d4:	21000804 	addi	r4,r4,32
  d8:	29400804 	addi	r5,r5,32
  dc:	2140121e 	bne	r4,r5,128 <alt_load+0x78>
  e0:	00000b06 	br	110 <alt_load+0x60>
  e4:	00c00034 	movhi	r3,0
  e8:	18c13f04 	addi	r3,r3,1276
  ec:	1907c83a 	sub	r3,r3,r4
  f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
  f4:	10fff526 	beq	r2,r3,cc <alt_load+0x1c>
    {
      *to++ = *from++;
  f8:	114f883a 	add	r7,r2,r5
  fc:	39c00017 	ldw	r7,0(r7)
 100:	110d883a 	add	r6,r2,r4
 104:	10800104 	addi	r2,r2,4
 108:	31c00015 	stw	r7,0(r6)
 10c:	003ff906 	br	f4 <alt_load+0x44>
 110:	01000034 	movhi	r4,0
 114:	01400034 	movhi	r5,0
 118:	21013804 	addi	r4,r4,1248
 11c:	29413804 	addi	r5,r5,1248

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 120:	2140101e 	bne	r4,r5,164 <alt_load+0xb4>
 124:	00000b06 	br	154 <alt_load+0xa4>
 128:	00c00034 	movhi	r3,0
 12c:	18c00804 	addi	r3,r3,32
 130:	1907c83a 	sub	r3,r3,r4
 134:	0005883a 	mov	r2,zero
  {
    while( to != end )
 138:	10fff526 	beq	r2,r3,110 <alt_load+0x60>
    {
      *to++ = *from++;
 13c:	114f883a 	add	r7,r2,r5
 140:	39c00017 	ldw	r7,0(r7)
 144:	110d883a 	add	r6,r2,r4
 148:	10800104 	addi	r2,r2,4
 14c:	31c00015 	stw	r7,0(r6)
 150:	003ff906 	br	138 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 154:	00002d80 	call	2d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 158:	dfc00017 	ldw	ra,0(sp)
 15c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 160:	00002dc1 	jmpi	2dc <alt_icache_flush_all>
 164:	00c00034 	movhi	r3,0
 168:	18c13e04 	addi	r3,r3,1272
 16c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 170:	0005883a 	mov	r2,zero
  {
    while( to != end )
 174:	18bff726 	beq	r3,r2,154 <alt_load+0xa4>
    {
      *to++ = *from++;
 178:	114f883a 	add	r7,r2,r5
 17c:	39c00017 	ldw	r7,0(r7)
 180:	110d883a 	add	r6,r2,r4
 184:	10800104 	addi	r2,r2,4
 188:	31c00015 	stw	r7,0(r6)
 18c:	003ff906 	br	174 <alt_load+0xc4>

00000190 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 190:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 194:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 198:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 19c:	00001f80 	call	1f8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1a0:	00002180 	call	218 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1a4:	d1a00217 	ldw	r6,-32760(gp)
 1a8:	d1600317 	ldw	r5,-32756(gp)
 1ac:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1b0:	dfc00017 	ldw	ra,0(sp)
 1b4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1b8:	000005c1 	jmpi	5c <main>

000001bc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1bc:	defffe04 	addi	sp,sp,-8
 1c0:	dc000015 	stw	r16,0(sp)
 1c4:	dfc00115 	stw	ra,4(sp)
 1c8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1cc:	00002e80 	call	2e8 <strlen>
 1d0:	01000034 	movhi	r4,0
 1d4:	000f883a 	mov	r7,zero
 1d8:	100d883a 	mov	r6,r2
 1dc:	800b883a 	mov	r5,r16
 1e0:	21013e04 	addi	r4,r4,1272
#else
    return fputs(str, stdout);
#endif
#endif
}
 1e4:	dfc00117 	ldw	ra,4(sp)
 1e8:	dc000017 	ldw	r16,0(sp)
 1ec:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1f0:	000021c1 	jmpi	21c <altera_avalon_jtag_uart_write>

000001f4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 1f4:	00002501 	jmpi	250 <alt_busy_sleep>

000001f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1f8:	deffff04 	addi	sp,sp,-4
 1fc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
 200:	00002e00 	call	2e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 204:	00800044 	movi	r2,1
 208:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20c:	dfc00017 	ldw	ra,0(sp)
 210:	dec00104 	addi	sp,sp,4
 214:	f800283a 	ret

00000218 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 218:	f800283a 	ret

0000021c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 21c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 220:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 224:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 228:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 22c:	2980072e 	bgeu	r5,r6,24c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 230:	38c00037 	ldwio	r3,0(r7)
 234:	18ffffec 	andhi	r3,r3,65535
 238:	183ffc26 	beq	r3,zero,22c <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 23c:	28c00007 	ldb	r3,0(r5)
 240:	20c00035 	stwio	r3,0(r4)
 244:	29400044 	addi	r5,r5,1
 248:	003ff806 	br	22c <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 24c:	f800283a 	ret

00000250 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 250:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 254:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 258:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 25c:	dc000015 	stw	r16,0(sp)
 260:	dfc00115 	stw	ra,4(sp)
 264:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 268:	00003fc0 	call	3fc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 26c:	10001026 	beq	r2,zero,2b0 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 270:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 274:	013999b4 	movhi	r4,58982
 278:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 27c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 280:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 284:	297fffc4 	addi	r5,r5,-1
 288:	283ffe1e 	bne	r5,zero,284 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 28c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 290:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 294:	18bffb16 	blt	r3,r2,284 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 298:	01400144 	movi	r5,5
 29c:	8009883a 	mov	r4,r16
 2a0:	00004b80 	call	4b8 <__mulsi3>
 2a4:	10bfffc4 	addi	r2,r2,-1
 2a8:	103ffe1e 	bne	r2,zero,2a4 <alt_busy_sleep+0x54>
 2ac:	00000506 	br	2c4 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2b0:	01400144 	movi	r5,5
 2b4:	8009883a 	mov	r4,r16
 2b8:	00004b80 	call	4b8 <__mulsi3>
 2bc:	10bfffc4 	addi	r2,r2,-1
 2c0:	00bffe16 	blt	zero,r2,2bc <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 2c4:	0005883a 	mov	r2,zero
 2c8:	dfc00117 	ldw	ra,4(sp)
 2cc:	dc000017 	ldw	r16,0(sp)
 2d0:	dec00204 	addi	sp,sp,8
 2d4:	f800283a 	ret

000002d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2d8:	f800283a 	ret

000002dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2dc:	f800283a 	ret

000002e0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 2e0:	000170fa 	wrctl	ienable,zero
 2e4:	f800283a 	ret

000002e8 <strlen>:
 2e8:	2005883a 	mov	r2,r4
 2ec:	10c00007 	ldb	r3,0(r2)
 2f0:	18000226 	beq	r3,zero,2fc <strlen+0x14>
 2f4:	10800044 	addi	r2,r2,1
 2f8:	003ffc06 	br	2ec <strlen+0x4>
 2fc:	1105c83a 	sub	r2,r2,r4
 300:	f800283a 	ret

00000304 <__divsi3>:
 304:	20001b16 	blt	r4,zero,374 <__divsi3+0x70>
 308:	000f883a 	mov	r7,zero
 30c:	28001616 	blt	r5,zero,368 <__divsi3+0x64>
 310:	200d883a 	mov	r6,r4
 314:	29001a2e 	bgeu	r5,r4,380 <__divsi3+0x7c>
 318:	00800804 	movi	r2,32
 31c:	00c00044 	movi	r3,1
 320:	00000106 	br	328 <__divsi3+0x24>
 324:	10000d26 	beq	r2,zero,35c <__divsi3+0x58>
 328:	294b883a 	add	r5,r5,r5
 32c:	10bfffc4 	addi	r2,r2,-1
 330:	18c7883a 	add	r3,r3,r3
 334:	293ffb36 	bltu	r5,r4,324 <__divsi3+0x20>
 338:	0005883a 	mov	r2,zero
 33c:	18000726 	beq	r3,zero,35c <__divsi3+0x58>
 340:	0005883a 	mov	r2,zero
 344:	31400236 	bltu	r6,r5,350 <__divsi3+0x4c>
 348:	314dc83a 	sub	r6,r6,r5
 34c:	10c4b03a 	or	r2,r2,r3
 350:	1806d07a 	srli	r3,r3,1
 354:	280ad07a 	srli	r5,r5,1
 358:	183ffa1e 	bne	r3,zero,344 <__divsi3+0x40>
 35c:	38000126 	beq	r7,zero,364 <__divsi3+0x60>
 360:	0085c83a 	sub	r2,zero,r2
 364:	f800283a 	ret
 368:	014bc83a 	sub	r5,zero,r5
 36c:	39c0005c 	xori	r7,r7,1
 370:	003fe706 	br	310 <__divsi3+0xc>
 374:	0109c83a 	sub	r4,zero,r4
 378:	01c00044 	movi	r7,1
 37c:	003fe306 	br	30c <__divsi3+0x8>
 380:	00c00044 	movi	r3,1
 384:	003fee06 	br	340 <__divsi3+0x3c>

00000388 <__modsi3>:
 388:	20001716 	blt	r4,zero,3e8 <__modsi3+0x60>
 38c:	000f883a 	mov	r7,zero
 390:	2005883a 	mov	r2,r4
 394:	28001216 	blt	r5,zero,3e0 <__modsi3+0x58>
 398:	2900162e 	bgeu	r5,r4,3f4 <__modsi3+0x6c>
 39c:	01800804 	movi	r6,32
 3a0:	00c00044 	movi	r3,1
 3a4:	00000106 	br	3ac <__modsi3+0x24>
 3a8:	30000a26 	beq	r6,zero,3d4 <__modsi3+0x4c>
 3ac:	294b883a 	add	r5,r5,r5
 3b0:	31bfffc4 	addi	r6,r6,-1
 3b4:	18c7883a 	add	r3,r3,r3
 3b8:	293ffb36 	bltu	r5,r4,3a8 <__modsi3+0x20>
 3bc:	18000526 	beq	r3,zero,3d4 <__modsi3+0x4c>
 3c0:	1806d07a 	srli	r3,r3,1
 3c4:	11400136 	bltu	r2,r5,3cc <__modsi3+0x44>
 3c8:	1145c83a 	sub	r2,r2,r5
 3cc:	280ad07a 	srli	r5,r5,1
 3d0:	183ffb1e 	bne	r3,zero,3c0 <__modsi3+0x38>
 3d4:	38000126 	beq	r7,zero,3dc <__modsi3+0x54>
 3d8:	0085c83a 	sub	r2,zero,r2
 3dc:	f800283a 	ret
 3e0:	014bc83a 	sub	r5,zero,r5
 3e4:	003fec06 	br	398 <__modsi3+0x10>
 3e8:	0109c83a 	sub	r4,zero,r4
 3ec:	01c00044 	movi	r7,1
 3f0:	003fe706 	br	390 <__modsi3+0x8>
 3f4:	00c00044 	movi	r3,1
 3f8:	003ff106 	br	3c0 <__modsi3+0x38>

000003fc <__udivsi3>:
 3fc:	200d883a 	mov	r6,r4
 400:	2900152e 	bgeu	r5,r4,458 <__udivsi3+0x5c>
 404:	28001416 	blt	r5,zero,458 <__udivsi3+0x5c>
 408:	00800804 	movi	r2,32
 40c:	00c00044 	movi	r3,1
 410:	00000206 	br	41c <__udivsi3+0x20>
 414:	10000e26 	beq	r2,zero,450 <__udivsi3+0x54>
 418:	28000516 	blt	r5,zero,430 <__udivsi3+0x34>
 41c:	294b883a 	add	r5,r5,r5
 420:	10bfffc4 	addi	r2,r2,-1
 424:	18c7883a 	add	r3,r3,r3
 428:	293ffa36 	bltu	r5,r4,414 <__udivsi3+0x18>
 42c:	18000826 	beq	r3,zero,450 <__udivsi3+0x54>
 430:	0005883a 	mov	r2,zero
 434:	31400236 	bltu	r6,r5,440 <__udivsi3+0x44>
 438:	314dc83a 	sub	r6,r6,r5
 43c:	10c4b03a 	or	r2,r2,r3
 440:	1806d07a 	srli	r3,r3,1
 444:	280ad07a 	srli	r5,r5,1
 448:	183ffa1e 	bne	r3,zero,434 <__udivsi3+0x38>
 44c:	f800283a 	ret
 450:	0005883a 	mov	r2,zero
 454:	f800283a 	ret
 458:	00c00044 	movi	r3,1
 45c:	003ff406 	br	430 <__udivsi3+0x34>

00000460 <__umodsi3>:
 460:	2005883a 	mov	r2,r4
 464:	2900122e 	bgeu	r5,r4,4b0 <__umodsi3+0x50>
 468:	28001116 	blt	r5,zero,4b0 <__umodsi3+0x50>
 46c:	01800804 	movi	r6,32
 470:	00c00044 	movi	r3,1
 474:	00000206 	br	480 <__umodsi3+0x20>
 478:	30000c26 	beq	r6,zero,4ac <__umodsi3+0x4c>
 47c:	28000516 	blt	r5,zero,494 <__umodsi3+0x34>
 480:	294b883a 	add	r5,r5,r5
 484:	31bfffc4 	addi	r6,r6,-1
 488:	18c7883a 	add	r3,r3,r3
 48c:	293ffa36 	bltu	r5,r4,478 <__umodsi3+0x18>
 490:	18000626 	beq	r3,zero,4ac <__umodsi3+0x4c>
 494:	1806d07a 	srli	r3,r3,1
 498:	11400136 	bltu	r2,r5,4a0 <__umodsi3+0x40>
 49c:	1145c83a 	sub	r2,r2,r5
 4a0:	280ad07a 	srli	r5,r5,1
 4a4:	183ffb1e 	bne	r3,zero,494 <__umodsi3+0x34>
 4a8:	f800283a 	ret
 4ac:	f800283a 	ret
 4b0:	00c00044 	movi	r3,1
 4b4:	003ff706 	br	494 <__umodsi3+0x34>

000004b8 <__mulsi3>:
 4b8:	0005883a 	mov	r2,zero
 4bc:	20000726 	beq	r4,zero,4dc <__mulsi3+0x24>
 4c0:	20c0004c 	andi	r3,r4,1
 4c4:	2008d07a 	srli	r4,r4,1
 4c8:	18000126 	beq	r3,zero,4d0 <__mulsi3+0x18>
 4cc:	1145883a 	add	r2,r2,r5
 4d0:	294b883a 	add	r5,r5,r5
 4d4:	203ffa1e 	bne	r4,zero,4c0 <__mulsi3+0x8>
 4d8:	f800283a 	ret
 4dc:	f800283a 	ret
